{
  "name": "Main V3",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "llm",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "9a78604b-7ddf-4c66-85e6-42f762332f87",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1104,
        400
      ],
      "webhookId": "llm-router"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "model",
              "name": "model",
              "value": "={{ $json.body.model || $json.model }}",
              "type": "string"
            },
            {
              "id": "prompt",
              "name": "prompt",
              "value": "={{ $json.body.prompt || $json.prompt }}",
              "type": "string"
            },
            {
              "id": "system",
              "name": "system",
              "value": "={{ $json.body.system || $json.system || '' }}",
              "type": "string"
            },
            {
              "id": "rag",
              "name": "rag",
              "value": "={{ $json.body.rag || $json.rag }}",
              "type": "string"
            },
            {
              "id": "rag_top_k",
              "name": "rag_top_k",
              "value": "={{ $json.body.rag_top_k || 5 }}",
              "type": "string"
            },
            {
              "id": "rag_score_threshold",
              "name": "rag_score_threshold",
              "value": "={{ $json.body.rag_score_threshold || 0.45 }}",
              "type": "string"
            },
            {
              "id": "rag_api_key",
              "name": "rag_api_key",
              "value": "={{ $json.body.rag_api_key || $env.RAG_API_KEY || 'change-me' }}",
              "type": "string"
            },
            {
              "id": "rag_tags",
              "name": "rag_tags",
              "value": "={{ $json.body.rag_tags || [] }}",
              "type": "string"
            },
            {
              "id": "hf_model",
              "name": "hf_model",
              "value": "={{ $json.body.hf_model || $json.hf_model || 'microsoft/DialoGPT-medium' }}",
              "type": "string"
            },
            {
              "id": "openai_model",
              "name": "openai_model",
              "value": "={{ $json.body.openai_model || $json.openai_model || 'gpt-4o-mini' }}",
              "type": "string"
            },
            {
              "id": "claude_model",
              "name": "claude_model",
              "value": "={{ $json.body.claude_model || $json.claude_model || 'claude-3-5-sonnet-20240620' }}",
              "type": "string"
            },
            {
              "id": "ollama_model",
              "name": "ollama_model",
              "value": "={{ $json.body.ollama_model || $json.ollama_model || $json.model || 'llama3' }}",
              "type": "string"
            },
            {
              "id": "mistral_model",
              "name": "mistral_model",
              "value": "={{ $json.body.mistral_model || $json.mistral_model || 'codestral-2501' }}",
              "type": "string"
            },
            {
              "id": "914bf0dc-439d-4afa-836a-aa6c6af0f654",
              "name": "vLLM_model",
              "value": "={{ $json.vLLM_model || $env.VLLM_MODEL_ALLROUNDER || 'Qwen/Qwen2.5-7B-Instruct-GPTQ-Int4' }}",
              "type": "string"
            },
            {
              "id": "8bece766-e196-4628-9855-f2b7111e1460",
              "name": "conversation_id",
              "value": "=={{ String(\n     $json.body?.conversation_id\n  || $json.conversation_id\n  || $json.headers?.['x-conversation-id']\n  || $json.query?.conversation_id\n  || ''\n).replace(/^[=\\s]+/, '').trim() }}\n\n",
              "type": "string"
            },
            {
              "id": "a04860a2-cff8-4566-a8c6-ff660fc40849",
              "name": "personas",
              "value": "={{ $json.body?.personas ?? $json.personas ?? null }}",
              "type": "string"
            },
            {
              "id": "ded98ff9-0e6f-45b3-b677-4222d82addfb",
              "name": "agent_rounds",
              "value": "={{ Number($json.body?.agent_rounds ?? $json.agent_rounds ?? 1) }}\n",
              "type": "number"
            },
            {
              "id": "cc8460c4-12da-4bbb-aac7-3a9b4aea886b",
              "name": "critic",
              "value": "={{ $json.body?.critic ?? $json.critic ?? null }}\n",
              "type": "string"
            },
            {
              "id": "40ae0a34-296f-4b43-8e4d-8ebcfcfad660",
              "name": "writer",
              "value": "={{ $json.body?.writer ?? $json.writer ?? null }}\n",
              "type": "string"
            },
            {
              "id": "51d02db7-0340-4f0c-a5ae-29298143f3bd",
              "name": "llm_target",
              "value": "={{ $json.body?.llm_target ?? $json.llm_target ?? '' }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "93557436-53a6-4e16-9a84-8917e5bd4855",
      "name": "Extract Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "5bf3c96a-344d-4d78-a749-2815dce72d19",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2000,
        512
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "b40VJ560cdjZeCOR",
          "mode": "list",
          "cachedResultName": "RAG Router V3"
        },
        "workflowInputs": {
          "mappingMode": "passThrough",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1120,
        512
      ],
      "id": "c6b095dc-e21a-49fa-b54c-57d773867905",
      "name": "Run RAG_Router Sub"
    },
    {
      "parameters": {
        "jsCode": "// 🧩 Load Memory – robust für JSON und Multipart, ohne direkten $headers-Zugriff\n\nfunction norm(x){ return String(x ?? '').trim(); }\nfunction valid(x){ return /^[A-Za-z0-9._:-]{8,200}$/.test(x); }\nfunction genId(){\n  if (globalThis.crypto?.randomUUID) return crypto.randomUUID();\n  const r = () => Math.random().toString(16).slice(2,10);\n  return `${Date.now().toString(16)}-${r()}-${r()}`;\n}\n\nconst staticData = $getWorkflowStaticData('global');\nstaticData._memory = staticData._memory || {};\n\n// 🔹 Header-Safe Variante – nutzt vorhandenes JSON\nconst body = $json.body || {};\nconst query = $json.query || {};\nconst hdr =\n  ($json.headers ??\n   $json.body?.headers ??\n   {}) || {};\n\nlet cid = norm(\n  body.conversation_id ??\n  $json.conversation_id ??\n  hdr['x-conversation-id'] ??\n  hdr['X-Conversation-Id'] ??\n  query.conversation_id ?? ''\n);\n\n// 🔹 Wenn keine gültige ID existiert → einmalig neue generieren\nif (!valid(cid)) {\n  cid = genId();\n}\n\n// 🔹 Memory aus globalem Speicher holen oder initialisieren\nconst mem = staticData._memory[cid] || { history: [], summary: '', updated_at: null };\n\n// 🔹 Ergebnis an nächste Nodes\nreturn [\n  {\n    json: {\n      ...$json,\n      conversation_id: cid,\n      memory: mem,\n      _original_prompt: body?.prompt ?? $json.prompt ?? '',\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        512
      ],
      "id": "c377ac1c-3314-4d52-9652-85c5cb13679f",
      "name": "Load Memory"
    },
    {
      "parameters": {
        "jsCode": "// 🧩 Update Memory – schreibt Antwort + Frage pro conversation_id in globalen Speicher\n\nfunction norm(x){ return String(x ?? '').trim(); }\nfunction valid(x){ return /^[A-Za-z0-9._:-]{8,200}$/.test(x); }\n\nconst staticData = $getWorkflowStaticData('global');\nstaticData._memory = staticData._memory || {};\n\n// 🔹 conversation_id aus JSON / Body / Header extrahieren\nconst body = $json.body || {};\nconst hdr = $json.headers || {};\nconst query = $json.query || {};\n\nlet cid = norm(\n  $json.conversation_id ??\n  body.conversation_id ??\n  hdr['x-conversation-id'] ??\n  hdr['X-Conversation-Id'] ??\n  query.conversation_id ?? ''\n);\n\nif (!valid(cid)) {\n  throw new Error('❌ conversation_id fehlt oder ungültig – kann Memory nicht updaten');\n}\n\n// 🔹 Vorhandenes Memory holen oder leeren Verlauf erstellen\nconst mem = staticData._memory[cid] || { history: [], summary: '', updated_at: null };\n\n// 🔹 Frage & Antwort auslesen\nconst userPrompt = $json._original_prompt ?? $json.prompt ?? $json.body?.prompt ?? '';\nconst answer = $json.answer ?? $json.text ?? $json.result ?? '';\nconst model = $json.model ?? $json.provider ?? 'unknown';\n\n// 🔹 Einträge anhängen\nmem.history.push(\n  { role: 'user', content: userPrompt },\n  { role: 'assistant', content: answer, model }\n);\n\n// 🔹 Zeit & optionale Summary übernehmen\nmem.updated_at = new Date().toISOString();\nif ($json.summary) mem.summary = $json.summary;\n\n// 🔹 Limitierung optional\nconst maxTurns = 20;\nif (mem.history.length > maxTurns * 2) {\n  mem.history = mem.history.slice(-maxTurns * 2);\n}\n\n// 🔹 Abspeichern\nstaticData._memory[cid] = mem;\n\n// 🔹 Ausgabe an nächste Node\nreturn [\n  {\n    json: {\n      ...$json,\n      conversation_id: cid,\n      memory: mem,\n      updated_at: mem.updated_at,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1552,
        416
      ],
      "id": "7ea51fc9-e42d-46a2-a776-0a5ad204ffb3",
      "name": "Update Memory"
    },
    {
      "parameters": {
        "jsCode": "function normalizeLabel(s){ s=String(s||'').trim(); s=s.replace(/^(ein|eine|einen|der|die|das)\\s+/i,''); return s.replace(/[,:;.\\s]+$/,'').trim(); }\nfunction parsePersonasString(s){\n  return String(s||'').split(/[;|]\\s*/).map(t=>t.trim()).filter(Boolean).map(t=>{\n    const m=t.match(/^(.+?)(?:\\s*\\(([^)]+)\\))?$/);\n    return { label:(m?.[1]||t).trim(), provider:String(m?.[2]||'vllm').toLowerCase() };\n  });\n}\nfunction tryJson(v){ if (typeof v!=='string') return v; try { return JSON.parse(v); } catch { return v; } }\nfunction toPersonaArray(x){\n  const v=tryJson(x);\n  if (Array.isArray(v)) return v;\n  if (typeof v==='string') return parsePersonasString(v);\n  return [];\n}\n\nconst raw = $json || {};\nconst b   = raw.body || {};\n\n// 🔧 NEU: Priorität = NICHT-LEERES Top-Level > NICHT-LEERES body > Strings/Fallback\nlet personas =\n  (Array.isArray(raw.personas) && raw.personas.length) ? raw.personas :\n  (Array.isArray(b.personas)   && b.personas.length)   ? b.personas   :\n  (toPersonaArray(raw.personas).length ? toPersonaArray(raw.personas) :\n   toPersonaArray(b.personas));\n\n// Fallback: aus system „Label (provider)“\nif (!Array.isArray(personas) || !personas.length) {\n  const sysText = String(raw.system ?? b.system ?? '').trim();\n  if (sysText){\n    const norm = sysText.replace(/\\s+(und|sowie|plus)\\s+/gi, ', ');\n    const rx = /([^(),;]+?)\\s*\\(([^)]+)\\)/g; const found=[]; let m;\n    while ((m = rx.exec(norm)) !== null) found.push({ label: normalizeLabel(m[1]), provider: String(m[2]).trim().toLowerCase() });\n    personas = found;\n  }\n}\n\n// Normieren & zählen\npersonas = Array.isArray(personas) ? personas.map((p,i)=>({\n  label: normalizeLabel(p.label || `Persona ${i+1}`),\n  provider: String(p.provider || 'vllm').toLowerCase(),\n  model: p.model || ''\n})) : [];\n\nconst count = personas.length;\n\nreturn [{\n  json: {\n    ...raw,\n    body: { ...b, personas },   // jetzt konsistent als Array\n    personas,                   // und auch Top-Level\n    persona_count: count,\n    multi_persona: count > 1\n  }\n}];\n"
      },
      "id": "3f86874b-2477-48f8-b445-4c358094ac85",
      "name": "Parse Personas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        416
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Aiz81noQbgD9M62I",
          "mode": "list",
          "cachedResultName": "Agent Orchestrator V2"
        },
        "workflowInputs": {
          "mappingMode": "passThrough",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "id": "a5afff0e-9149-4dd2-9606-fa4b1746b5d6",
      "name": "Run Agent_Orchestrator Sub",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1120,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Normalisiert personas (Array), writer (Objekt/String) UND critic (Objekt/String) + agent_rounds (Number)\n\nfunction parsePersonasString(s){\n  // \"Rolle (provider); Rolle2 (provider2)\"\n  return String(s||'')\n    .split(/[;|]\\s*/).map(t=>t.trim()).filter(Boolean).map(t=>{\n      const m = t.match(/^(.+?)(?:\\s*\\(([^)]+)\\))?$/);\n      return {\n        label: (m?.[1]||t).trim(),\n        provider: String(m?.[2]||'vllm').toLowerCase()\n      };\n    });\n}\nfunction toObjMaybe(str){\n  if (typeof str !== 'string') return str;\n  try { return JSON.parse(str); } catch { return null; }\n}\n\nlet personas = $json.personas ?? $json.body?.personas ?? null;\nif (typeof personas === 'string') {\n  try {\n    const parsed = JSON.parse(personas);\n    personas = Array.isArray(parsed) ? parsed : parsePersonasString(personas);\n  } catch {\n    personas = parsePersonasString(personas);\n  }\n}\n\n// Writer normalisieren (Objekt oder String→JSON)\nlet writer = $json.writer ?? $json.body?.writer ?? null;\nif (typeof writer === 'string') writer = toObjMaybe(writer) ?? null;\n\n// Critic normalisieren (Objekt oder String→JSON)\nlet critic = $json.critic ?? $json.body?.critic ?? null;\nif (typeof critic === 'string') critic = toObjMaybe(critic) ?? null;\n\n// agent_rounds -> Number (>=1, sinnvolle Obergrenze)\nlet agent_rounds = Number($json.agent_rounds ?? $json.body?.agent_rounds ?? 1);\nif (!Number.isFinite(agent_rounds) || agent_rounds < 1) agent_rounds = 1;\nagent_rounds = Math.min(10, Math.round(agent_rounds));\n\n// Personas final normieren\nfunction normalizeLabel(s){ s=String(s||'').trim(); s=s.replace(/^(ein|eine|einen|der|die|das)\\s+/i,''); return s.replace(/[,:;.\\s]+$/,'').trim(); }\npersonas = Array.isArray(personas) ? personas.map((p,i)=>({\n  label: normalizeLabel(p.label || `Persona ${i+1}`),\n  provider: String(p.provider || 'mistral').toLowerCase(),\n  model: p.model || ''\n})) : [];\n\nreturn [{ json: { ...$json, personas, writer, critic, agent_rounds } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        416
      ],
      "id": "77a86890-b23f-4951-9380-f0314c11510a",
      "name": "Normalize Personas & Writer"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2ce508d4-409e-423c-becc-529aba4ec3de",
              "leftValue": "={{ $json.body?.async === true }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -656,
        400
      ],
      "id": "2bfe8b1a-5d26-46c0-83c4-032e06faaaa8",
      "name": "Async?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://rag-backend:8082/rag/jobs",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"={{ $json.title || $json.body?.title || $json.prompt || 'Agentenlauf' }}\",\n  \"async\": true\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -432,
        128
      ],
      "id": "afe9b9db-898a-4355-8ece-8196c4426340",
      "name": "Create Job"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseCode": 202,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        0,
        0
      ],
      "id": "8af6ea5f-b574-42c4-a5f0-a2f02db2bf54",
      "name": "ACK 202"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9560f65b-34ab-4ecb-8033-fa646e2029f2",
              "leftValue": "={{ !!($json.job_id || $json.id) }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1776,
        416
      ],
      "id": "bf79ceef-3d2d-4268-af20-7b252997dcc6",
      "name": "Async? (Final)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.complete || ('http://rag-backend:8082/rag/jobs/' + $json.job_id + '/complete') }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n  {\n    answer:  ($json.answer || $json.boardText || $json.writer_text || $json.output || $json.message || \"\").trim(),\n    sources: $json.sources || $json.documents || [],\n    artifacts: $json.artifacts || {},\n    meta: { personas: $json.personas || [], rounds: $json.agent_rounds || 1 }\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        320
      ],
      "id": "ca585c31-3e86-4933-8d22-7a4d97132383",
      "name": "Complete Job"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        0,
        352
      ],
      "id": "20841d95-8bf2-4f54-b29b-575e2621e04c",
      "name": "Merge"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -432,
        320
      ],
      "id": "dd3ab90a-5af0-44a5-877f-b712439818d9",
      "name": "Pass Original"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a879cea6-4ed7-49f5-92aa-0a7fec65144b",
              "name": "ok",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "1b6d1fc1-4a66-455c-aada-e6db15dfb65d",
              "name": "job_id",
              "value": "={{ $json.job_id || $json.id }}",
              "type": "string"
            },
            {
              "id": "8ed76399-f3cc-4229-b21d-fa732c205091",
              "name": "title",
              "value": "={{ $json.title || $json.body?.title || $json.body?.prompt || $json.prompt || 'Agentenlauf' }}",
              "type": "string"
            },
            {
              "id": "20fac951-05f7-47fa-bdb7-5a0544d32dcd",
              "name": "events",
              "value": "={{ '/rag/jobs/' + ($json.job_id || $json.id) + '/events' }}",
              "type": "string"
            },
            {
              "id": "c580578c-dd1a-42db-bf74-215fe0e9010f",
              "name": "result",
              "value": "={{ '/rag/jobs/' + ($json.job_id || $json.id) + '/result' }}",
              "type": "string"
            },
            {
              "id": "2b6cd081-dc76-442a-a56d-f4d1cb7775d0",
              "name": "started_at",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -224,
        64
      ],
      "id": "da544ce4-c741-4170-80ac-10f88ca342bc",
      "name": "Build ACK"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "multi-persona",
              "leftValue": "={{ Number($json.persona_count || (Array.isArray($json.personas) ? $json.personas.length : 0)) }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "60008d2b-bc56-4f90-ac71-8453097bc05a",
              "leftValue": "={{$json.agents_enabled}}",
              "rightValue": 1,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "ef9b4a9b-355f-4493-b90a-17e0562cf7a0",
              "leftValue": "={{$json.force_agents}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "cbd9885f-5f7c-43e5-976a-4be7cc5c43f8",
      "name": "Agent Mode?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        672,
        416
      ]
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "connection": "upgrade",
            "host": "ai.local",
            "x-real-ip": "192.168.244.229",
            "x-forwarded-for": "192.168.244.229",
            "x-forwarded-proto": "https",
            "content-length": "91",
            "sec-ch-ua-platform": "\"macOS\"",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36 Edg/139.0.0.0",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Microsoft Edge\";v=\"139\", \"Chromium\";v=\"139\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://ai.local",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://ai.local/ui/index.html",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "de,de-DE;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX18%2BUaadL%2F1nd1jk4fwcJtHgOKElOMoYd0g%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19AQ8VVUuEv35hCFjVozq%2BEDvHupJPBNIA%3D; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2BiUtFumoP2y%2FoOUL1xHPnLiq5AwwFUbz6cZJPAKjg0rF49U6nusBcN7PWatIwAHKlFe3KNEMeYAQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX1%2BleOUVvj8pE%2FVndgnEJvGnfxTaX%2B5mfdiuM0NIdftH2Wb%2BsOPH3x31kQcznJeiIfAd%2B53aH2GZcmnc9HywfxKE38M0iMpxQJP%2FhXXTFQTXgAEREO5o%2FDr94prQuAvrYsM5MJcVIn9JblhDYpqTwwKt9QFPL0sJL6w%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX19fH1WKoHUONYLejWxavZSKGfkF0LsKBqfM87c2L%2FT%2F1CfQTylFT6gOZbmXqCl1UkuOh%2FDqo%2BdSD1lOvVpyiaDySfV0PuMXNVldnEAOUYvn%2FFTOQyF2MuINUDVKJDU4y%2FOPnSMaQeE7NA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%225e9f1d1029083353f9423560cb0b3070390ad03855815e064cf1d2e50cd094b4%2386228bc1-3d85-4e8b-a5ab-ccfe9ed47737%22%2C%22%24sesid%22%3A%5Bnull%2C%220198ad0e-57ae-7b1e-a0b3-41dfe380ab18%22%2C1755250055086%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fai.local%2Fhome%2Fworkflows%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2Bgten%2FQgGHuCH4x1hG9khPwtGj4921TbJSke3DrfuHLqt1Iqg2rPuvFYjm12EJ7u6KyXUqU%2BH5uHwwrcLj2h1344LupoJzlZfAdXcEpatGv9gRRpYe4ZkUwmcr1%2BGZFl6RyLiZ%2BYXfOA%3D%3D"
          },
          "params": {},
          "query": {},
          "body": {
            "prompt": "trage ich schuhe oder bin ich barfuß?",
            "system": "",
            "model": "llama3",
            "rag": true
          },
          "webhookUrl": "http://localhost:5678/webhook/llm",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields": {
      "main": [
        [
          {
            "node": "Async?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run RAG_Router Sub": {
      "main": [
        [
          {
            "node": "Update Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Memory": {
      "main": [
        [
          {
            "node": "Run RAG_Router Sub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Memory": {
      "main": [
        [
          {
            "node": "Async? (Final)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Personas": {
      "main": [
        [
          {
            "node": "Agent Mode?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Agent_Orchestrator Sub": {
      "main": [
        [
          {
            "node": "Update Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Personas & Writer": {
      "main": [
        [
          {
            "node": "Parse Personas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Async?": {
      "main": [
        [
          {
            "node": "Create Job",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pass Original",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Normalize Personas & Writer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Job": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Build ACK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Async? (Final)": {
      "main": [
        [
          {
            "node": "Complete Job",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Normalize Personas & Writer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pass Original": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build ACK": {
      "main": [
        [
          {
            "node": "ACK 202",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent Mode?": {
      "main": [
        [
          {
            "node": "Run Agent_Orchestrator Sub",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Load Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "faf53253-230e-46c1-86a0-e934c2ae45c5",
  "meta": {
    "instanceId": "561919f222f248fefb13e03c84adfc7356dad806feb0489acfa0f3688a2a1852"
  },
  "id": "ntFgm5LuYfYPMKiM",
  "tags": []
}