{
  "name": "main_v3",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "llm",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "222f6857-0bdb-4310-82ff-d0e18c9a9146",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1296,
        160
      ],
      "webhookId": "llm-router"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "model",
              "name": "model",
              "value": "={{ $json.body.model || $json.model }}",
              "type": "string"
            },
            {
              "id": "prompt",
              "name": "prompt",
              "value": "={{ $json.body.prompt || $json.prompt }}",
              "type": "string"
            },
            {
              "id": "system",
              "name": "system",
              "value": "={{ $json.body.system || $json.system || '' }}",
              "type": "string"
            },
            {
              "id": "rag",
              "name": "rag",
              "value": "={{ $json.body.rag || $json.rag }}",
              "type": "string"
            },
            {
              "id": "rag_top_k",
              "name": "rag_top_k",
              "value": "={{ $json.body.rag_top_k || 5 }}",
              "type": "string"
            },
            {
              "id": "rag_score_threshold",
              "name": "rag_score_threshold",
              "value": "={{ $json.body.rag_score_threshold || 0.45 }}",
              "type": "string"
            },
            {
              "id": "rag_api_key",
              "name": "rag_api_key",
              "value": "={{ $json.body.rag_api_key || $env.RAG_API_KEY || 'change-me' }}",
              "type": "string"
            },
            {
              "id": "rag_tags",
              "name": "rag_tags",
              "value": "={{ $json.body.rag_tags || [] }}",
              "type": "string"
            },
            {
              "id": "hf_model",
              "name": "hf_model",
              "value": "={{ $json.body.hf_model || $json.hf_model || 'microsoft/DialoGPT-medium' }}",
              "type": "string"
            },
            {
              "id": "openai_model",
              "name": "openai_model",
              "value": "={{ $json.body.openai_model || $json.openai_model || 'gpt-4o-mini' }}",
              "type": "string"
            },
            {
              "id": "claude_model",
              "name": "claude_model",
              "value": "={{ $json.body.claude_model || $json.claude_model || 'claude-3-5-sonnet-20240620' }}",
              "type": "string"
            },
            {
              "id": "ollama_model",
              "name": "ollama_model",
              "value": "={{ $json.body.ollama_model || $json.ollama_model || $json.model || 'llama3' }}",
              "type": "string"
            },
            {
              "id": "mistral_model",
              "name": "mistral_model",
              "value": "={{ $json.body.mistral_model || $json.mistral_model || 'codestral-2501' }}",
              "type": "string"
            },
            {
              "id": "8bece766-e196-4628-9855-f2b7111e1460",
              "name": "conversation_id",
              "value": "=={{ String(\n     $json.body?.conversation_id\n  || $json.conversation_id\n  || $json.headers?.['x-conversation-id']\n  || $json.query?.conversation_id\n  || ''\n).replace(/^[=\\s]+/, '').trim() }}\n\n",
              "type": "string"
            },
            {
              "id": "a04860a2-cff8-4566-a8c6-ff660fc40849",
              "name": "personas",
              "value": "={{ $json.body?.personas ?? $json.personas ?? null }}",
              "type": "string"
            },
            {
              "id": "40ae0a34-296f-4b43-8e4d-8ebcfcfad660",
              "name": "writer",
              "value": "={{ $json.body?.writer ?? $json.writer ?? null }}\n",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "ac7eccea-42c1-40e7-9e19-3ea0da02d3f3",
      "name": "Extract Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1072,
        160
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "41fb6e4f-772f-4d75-b481-0c4c0ebd8a95",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        496,
        160
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "2cmATLhSNBMN3a2H",
          "mode": "list",
          "cachedResultName": "RAG_router_v3"
        },
        "workflowInputs": {
          "mappingMode": "passThrough",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        48,
        256
      ],
      "id": "d4c5ce71-cb20-4e1d-8f28-7de9f92aae3a",
      "name": "Run RAG_Router Sub"
    },
    {
      "parameters": {
        "jsCode": "function genId(){ if (globalThis.crypto?.randomUUID) return crypto.randomUUID();\n  const r=()=>Math.random().toString(16).slice(2,10); return `${Date.now().toString(16)}-${r()}-${r()}`; }\nfunction norm(x){ return String(x ?? '').replace(/^[=\\s]+/, '').trim(); }\nfunction valid(x){ return /^[A-Za-z0-9._:-]{8,200}$/.test(x); }\n\nconst staticData = $getWorkflowStaticData('global');\nstaticData._memory = staticData._memory || {};\n\nconst b   = $json.body || {};\nlet cid = norm(b.conversation_id ?? $json.conversation_id ?? $json.headers?.['x-conversation-id'] ?? $json.query?.conversation_id);\nif (!valid(cid)) cid = genId();              // nur hier neu erzeugen\n\nconst mem = staticData._memory[cid] || { history: [], summary: '', updated_at: null };\nreturn [{ json: { ...$json, conversation_id: cid, memory: mem, _original_prompt: b?.prompt ?? $json?.prompt ?? '' } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        256
      ],
      "id": "a1a8ee53-800c-426c-a7d2-d96b2b34cf5a",
      "name": "Load Memory"
    },
    {
      "parameters": {
        "jsCode": "function norm(x){ return String(x ?? '').replace(/^[=\\s]+/, '').trim(); }\nfunction valid(x){ return /^[A-Za-z0-9._:-]{8,200}$/.test(x); }\n\nconst staticData = $getWorkflowStaticData('global');\nstaticData._memory = staticData._memory || {};\n\nconst items = $input.all();\nconst out = [];\n\nfor (const it of items) {\n  const j = it.json || {};\n  const cid = norm(j.conversation_id ?? j.body?.conversation_id ?? '');\n  if (!valid(cid)) { out.push({ json: { ...j, _mem_note: 'no_cid_in_update' } }); continue; }\n\n  const mem = staticData._memory[cid] || { history: [], summary: '', updated_at: null };\n  const userContent = j.original_prompt ?? j._original_prompt ?? j.prompt ?? '';\n  const botContent  = j.result ?? j.text ?? '';\n  if (userContent || botContent) {\n    const userMsg = { role:'user', content:String(userContent), t: Date.now() };\n    const botMsg  = { role:'assistant', content:String(botContent), t: Date.now() };\n    mem.history = [...(mem.history||[]), userMsg, botMsg].slice(-12);\n    mem.updated_at = new Date().toISOString();\n    staticData._memory[cid] = mem;\n  }\n  out.push({ json: { ...j, conversation_id: cid, memory: staticData._memory[cid] } });\n}\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        160
      ],
      "id": "f16688e5-804a-4436-bc60-e92030afafb6",
      "name": "Update Memory"
    },
    {
      "parameters": {
        "jsCode": "function normalizeLabel(s){ s=String(s||'').trim(); s=s.replace(/^(ein|eine|einen|der|die|das)\\s+/i,''); return s.replace(/[,:;.\\s]+$/,'').trim(); }\nfunction parsePersonasString(s){\n  return String(s||'').split(/[;|]\\s*/).map(t=>t.trim()).filter(Boolean).map(t=>{\n    const m=t.match(/^(.+?)(?:\\s*\\(([^)]+)\\))?$/);\n    return { label:(m?.[1]||t).trim(), provider:String(m?.[2]||'mistral').toLowerCase() };\n  });\n}\nfunction tryJson(v){ if (typeof v!=='string') return v; try { return JSON.parse(v); } catch { return v; } }\nfunction toPersonaArray(x){\n  const v=tryJson(x);\n  if (Array.isArray(v)) return v;\n  if (typeof v==='string') return parsePersonasString(v);\n  return [];\n}\n\nconst raw = $json || {};\nconst b   = raw.body || {};\n\n// ðŸ”§ NEU: PrioritÃ¤t = NICHT-LEERES Top-Level > NICHT-LEERES body > Strings/Fallback\nlet personas =\n  (Array.isArray(raw.personas) && raw.personas.length) ? raw.personas :\n  (Array.isArray(b.personas)   && b.personas.length)   ? b.personas   :\n  (toPersonaArray(raw.personas).length ? toPersonaArray(raw.personas) :\n   toPersonaArray(b.personas));\n\n// Fallback: aus system â€žLabel (provider)â€œ\nif (!Array.isArray(personas) || !personas.length) {\n  const sysText = String(raw.system ?? b.system ?? '').trim();\n  if (sysText){\n    const norm = sysText.replace(/\\s+(und|sowie|plus)\\s+/gi, ', ');\n    const rx = /([^(),;]+?)\\s*\\(([^)]+)\\)/g; const found=[]; let m;\n    while ((m = rx.exec(norm)) !== null) found.push({ label: normalizeLabel(m[1]), provider: String(m[2]).trim().toLowerCase() });\n    personas = found;\n  }\n}\n\n// Normieren & zÃ¤hlen\npersonas = Array.isArray(personas) ? personas.map((p,i)=>({\n  label: normalizeLabel(p.label || `Persona ${i+1}`),\n  provider: String(p.provider || 'mistral').toLowerCase(),\n  model: p.model || ''\n})) : [];\n\nconst count = personas.length;\n\nreturn [{\n  json: {\n    ...raw,\n    body: { ...b, personas },   // jetzt konsistent als Array\n    personas,                   // und auch Top-Level\n    persona_count: count,\n    multi_persona: count > 1\n  }\n}];\n"
      },
      "id": "5a7599d5-115d-4b6c-968e-bfbd08275562",
      "name": "Parse Personas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -624,
        160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "multi-persona",
              "leftValue": "={{ $json.persona_count || 0 }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "790093c0-3cff-41c0-8cc7-10444f584714",
      "name": "Multiple Personas?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -400,
        160
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "mpzLXE9aCdIXfdca",
          "mode": "list",
          "cachedResultName": "agent_orchestrator"
        },
        "workflowInputs": {
          "mappingMode": "passThrough",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "id": "ff501a8a-20aa-44d6-b902-46ca56bb4850",
      "name": "Run Agent_Orchestrator Sub",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        48,
        64
      ]
    },
    {
      "parameters": {
        "jsCode": "// Normalisiert personas (Array) & writer (Objekt) fÃ¼r den Orchestrator\n\nfunction parsePersonasString(s){\n  // \"Rolle (provider); Rolle2 (provider2)\"\n  return String(s||'')\n    .split(/[;|]\\s*/).map(t=>t.trim()).filter(Boolean).map(t=>{\n      const m = t.match(/^(.+?)(?:\\s*\\(([^)]+)\\))?$/);\n      return {\n        label: (m?.[1]||t).trim(),\n        provider: String(m?.[2]||'mistral').toLowerCase()\n      };\n    });\n}\n\nlet personas = $json.personas ?? $json.body?.personas ?? null;\nif (typeof personas === 'string') {\n  try {\n    const parsed = JSON.parse(personas);\n    personas = Array.isArray(parsed) ? parsed : parsePersonasString(personas);\n  } catch {\n    personas = parsePersonasString(personas);\n  }\n}\n\nlet writer = $json.writer ?? $json.body?.writer ?? null;\nif (typeof writer === 'string') {\n  try { writer = JSON.parse(writer); } catch { writer = null; }\n}\n\nreturn [{ json: { ...$json, personas, writer } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        160
      ],
      "id": "37860fd8-5e30-48ee-805e-671840165189",
      "name": "Normalize Personas & Writer"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "connection": "upgrade",
            "host": "ai.local",
            "x-real-ip": "192.168.244.229",
            "x-forwarded-for": "192.168.244.229",
            "x-forwarded-proto": "https",
            "content-length": "91",
            "sec-ch-ua-platform": "\"macOS\"",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36 Edg/139.0.0.0",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Microsoft Edge\";v=\"139\", \"Chromium\";v=\"139\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://ai.local",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "referer": "https://ai.local/ui/index.html",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "de,de-DE;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX18%2BUaadL%2F1nd1jk4fwcJtHgOKElOMoYd0g%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX19AQ8VVUuEv35hCFjVozq%2BEDvHupJPBNIA%3D; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX1%2BiUtFumoP2y%2FoOUL1xHPnLiq5AwwFUbz6cZJPAKjg0rF49U6nusBcN7PWatIwAHKlFe3KNEMeYAQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX1%2BleOUVvj8pE%2FVndgnEJvGnfxTaX%2B5mfdiuM0NIdftH2Wb%2BsOPH3x31kQcznJeiIfAd%2B53aH2GZcmnc9HywfxKE38M0iMpxQJP%2FhXXTFQTXgAEREO5o%2FDr94prQuAvrYsM5MJcVIn9JblhDYpqTwwKt9QFPL0sJL6w%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX19fH1WKoHUONYLejWxavZSKGfkF0LsKBqfM87c2L%2FT%2F1CfQTylFT6gOZbmXqCl1UkuOh%2FDqo%2BdSD1lOvVpyiaDySfV0PuMXNVldnEAOUYvn%2FFTOQyF2MuINUDVKJDU4y%2FOPnSMaQeE7NA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%225e9f1d1029083353f9423560cb0b3070390ad03855815e064cf1d2e50cd094b4%2386228bc1-3d85-4e8b-a5ab-ccfe9ed47737%22%2C%22%24sesid%22%3A%5Bnull%2C%220198ad0e-57ae-7b1e-a0b3-41dfe380ab18%22%2C1755250055086%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fai.local%2Fhome%2Fworkflows%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2Bgten%2FQgGHuCH4x1hG9khPwtGj4921TbJSke3DrfuHLqt1Iqg2rPuvFYjm12EJ7u6KyXUqU%2BH5uHwwrcLj2h1344LupoJzlZfAdXcEpatGv9gRRpYe4ZkUwmcr1%2BGZFl6RyLiZ%2BYXfOA%3D%3D"
          },
          "params": {},
          "query": {},
          "body": {
            "prompt": "trage ich schuhe oder bin ich barfuÃŸ?",
            "system": "",
            "model": "llama3",
            "rag": true
          },
          "webhookUrl": "http://localhost:5678/webhook/llm",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields": {
      "main": [
        [
          {
            "node": "Normalize Personas & Writer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run RAG_Router Sub": {
      "main": [
        [
          {
            "node": "Update Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Memory": {
      "main": [
        [
          {
            "node": "Run RAG_Router Sub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Memory": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Personas": {
      "main": [
        [
          {
            "node": "Multiple Personas?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Multiple Personas?": {
      "main": [
        [
          {
            "node": "Run Agent_Orchestrator Sub",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Load Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Agent_Orchestrator Sub": {
      "main": [
        [
          {
            "node": "Update Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Personas & Writer": {
      "main": [
        [
          {
            "node": "Parse Personas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4e60e798-6c40-4f0c-b2a8-bc4729dcf0d1",
  "meta": {
    "instanceId": "5e9f1d1029083353f9423560cb0b3070390ad03855815e064cf1d2e50cd094b4"
  },
  "id": "vPH5vQOIKaPEHHna",
  "tags": []
}