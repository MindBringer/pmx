{
  "name": "Prompting",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "llm",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "19b91971-984a-4602-b7a3-73bc3adc1188",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1120,
        944
      ],
      "webhookId": "llm-router"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "prompt-assignment",
              "name": "prompt",
              "value": "={{ $json.body.prompt || $json.prompt }}",
              "type": "string"
            },
            {
              "id": "system-assignment",
              "name": "system",
              "value": "={{ $json.body.system || $json.system || '' }}",
              "type": "string"
            },
            {
              "id": "model-assignment",
              "name": "model",
              "value": "={{ $json.body.model || $json.model }}",
              "type": "string"
            },
            {
              "id": "hf-model-assignment",
              "name": "hf_model",
              "value": "={{ $json.body.hf_model || $json.hf_model || 'microsoft/DialoGPT-medium' }}",
              "type": "string"
            },
            {
              "id": "openai-model-assignment",
              "name": "openai_model",
              "value": "={{ $json.body.openai_model || $json.openai_model || 'gpt-3.5-turbo' }}",
              "type": "string"
            },
            {
              "id": "claude-model-assignment",
              "name": "claude_model",
              "value": "={{ $json.body.claude_model || $json.claude_model || 'claude-3-sonnet-20240229' }}",
              "type": "string"
            },
            {
              "id": "ollama-model-assignment",
              "name": "ollama_model",
              "value": "={{ $json.body.ollama_model || $json.ollama_model || $json.model || 'mistral' }}",
              "type": "string"
            },
            {
              "id": "0b66fc63-ad7f-4b97-a509-bd783b11d785",
              "name": "mistral_model",
              "value": "={{ $json.body.mistral_model || $json.mistral_model || 'codestral-2501' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f91ff6d4-4f27-46af-af5a-efd369a01c9b",
      "name": "Extract Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -896,
        944
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/{{ $json.hf_model }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "huggingFaceApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"inputs\": {{ ($json.system && $json.system.trim() !== '') ? $json.system + '\\n\\n' + $json.prompt : $json.prompt }},\n  \"parameters\": {\n    \"max_length\": 500,\n    \"temperature\": 0.7,\n    \"do_sample\": true,\n    \"return_full_text\": false\n  }\n}",
        "options": {}
      },
      "id": "7383e68f-a65a-4ff7-823e-bdaf00b1d1af",
      "name": "Call Hugging Face",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        448,
        1040
      ],
      "credentials": {
        "huggingFaceApi": {
          "id": "FgQ7RyAOsPuyxhJJ",
          "name": "HuggingFaceApi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "anthropicApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n  const body = {\n    \"model\": $json.claude_model,\n    \"max_tokens\": 1000,\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": $json.prompt\n      }\n    ]\n  };\n  \n  // Add system message if provided\n  if ($json.system && $json.system.trim() !== '') {\n    body.system = $json.system;\n  }\n  \n  return JSON.stringify(body);\n}}",
        "options": {}
      },
      "id": "132f5308-d9fd-4404-b287-0810b506e136",
      "name": "Call Claude",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        448,
        848
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n  const messages = [];\n  \n  // Add system message if provided\n  if ($json.system && $json.system.trim() !== '') {\n    messages.push({\n      \"role\": \"system\",\n      \"content\": $json.system\n    });\n  }\n  \n  // Add user message\n  messages.push({\n    \"role\": \"user\",\n    \"content\": $json.prompt\n  });\n  \n  return JSON.stringify({\n    \"model\": $json.openai_model,\n    \"messages\": messages,\n    \"max_tokens\": 1000,\n    \"temperature\": 0.7\n  });\n}}",
        "options": {}
      },
      "id": "7dc9c865-4ed6-4756-ba98-efac9358acd8",
      "name": "Call OpenAI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        448,
        656
      ],
      "credentials": {
        "openAiApi": {
          "id": "xhNrRCTywP5VKQe6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "openai-condition",
              "leftValue": "={{ $json.model }}",
              "rightValue": "openai",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3ac27cdc-0774-44a5-a138-76b1671d1863",
      "name": "Is OpenAI?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -448,
        1040
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "claude-condition",
              "leftValue": "={{ $json.model }}",
              "rightValue": "anthropic",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "650a1cda-88e2-4f96-95e4-85f06653c34d",
      "name": "Is Claude?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -224,
        1136
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "hf-condition",
              "leftValue": "={{ $json.model }}",
              "rightValue": "huggingface",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1b845f85-5e1e-4f04-a319-c9afd0e0339c",
      "name": "Is HuggingFace?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        0,
        1232
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract response based on API format\nconst data = $input.first().json;\nconst modelUsed = $('Extract Fields').first().json.model;\nconst requestedModel = $('Extract Fields').first().json;\n\nlet result;\nlet provider;\nlet actualModel;\n\n// OpenAI Format\nif (data && data.choices && data.choices[0] && data.choices[0].message) {\n  result = data.choices[0].message.content;\n  provider = 'OpenAI';\n  actualModel = data.model || requestedModel.openai_model;\n} \n// Claude/Anthropic Format\nelse if (data && data.content && Array.isArray(data.content) && data.content[0]) {\n  result = data.content[0].text || data.content[0].content;\n  provider = 'Claude/Anthropic';\n  actualModel = data.model || requestedModel.claude_model;\n}\n// Hugging Face Format (Array response)\nelse if (Array.isArray(data) && data[0] && data[0].generated_text) {\n  result = data[0].generated_text;\n  provider = 'Hugging Face';\n  actualModel = requestedModel.hf_model;\n}\n// Hugging Face Format (Single object)\nelse if (data && data.generated_text) {\n  result = data.generated_text;\n  provider = 'Hugging Face';\n  actualModel = requestedModel.hf_model;\n}\n// Ollama Format\nelse if (data && data.response) {\n  result = data.response;\n  provider = 'Ollama';\n  actualModel = data.model || requestedModel.ollama_model;\n}\n// Ollama alternative formats\nelse if (data && data.message) {\n  result = data.message;\n  provider = 'Ollama';\n  actualModel = requestedModel.ollama_model;\n}\n// Error handling\nelse if (data && data.error) {\n  result = `Error: ${data.error.message || JSON.stringify(data.error)}`;\n  provider = 'Error';\n  actualModel = 'N/A';\n}\n// Fallback\nelse {\n  result = `Unexpected response format: ${JSON.stringify(data)}`;\n  provider = 'Unknown';\n  actualModel = 'N/A';\n}\n\n// Clean response (remove input prompt for HF if present)\nif (provider === 'Hugging Face' && result) {\n  const originalPrompt = requestedModel.prompt;\n  const systemPrompt = requestedModel.system;\n  \n  if (systemPrompt && result.startsWith(systemPrompt)) {\n    result = result.substring(systemPrompt.length).trim();\n    if (result.startsWith(originalPrompt)) {\n      result = result.substring(originalPrompt.length).trim();\n    }\n  } else if (result.startsWith(originalPrompt)) {\n    result = result.substring(originalPrompt.length).trim();\n  }\n}\n\nreturn {\n  result: result?.trim() || '',\n  status: data && data.error ? 'error' : 'success',\n  provider: provider,\n  model_requested: modelUsed,\n  model_used: actualModel,\n  timestamp: new Date().toISOString(),\n  usage: data.usage || null,\n  raw_response: data\n};"
      },
      "id": "5584800a-9b01-4778-ace7-50578e81ae32",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        944
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "a42ccf2b-486b-407d-941c-3cd2beb378e9",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        896,
        944
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "openai-condition",
              "leftValue": "={{ $json.model }}",
              "rightValue": "mistralapi",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8a625d1c-78f1-4fa9-bd79-b343f287ccad",
      "name": "Is mistralAPI?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -672,
        944
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"{{ $json.mistral_model }}\",\n  \"messages\": [\n    {\n      \"role\": \"system\", \n      \"content\": \"{{ $json.system || 'Du bist ein hilfsbereiter Assistent.' }}\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.prompt }}\"\n    }\n  ],\n  \"max_tokens\": 200,\n  \"temperature\": 0.7\n}",
        "options": {}
      },
      "id": "4bb16776-fb53-4cb4-b958-7589bd859268",
      "name": "Call mistralAPI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        448,
        464
      ],
      "credentials": {
        "openAiApi": {
          "id": "xhNrRCTywP5VKQe6",
          "name": "OpenAi account"
        },
        "mistralCloudApi": {
          "id": "MaGMrevoedDT7JGl",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "llama3-condition",
              "leftValue": "={{ $json.model }}",
              "rightValue": "mistral",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2e12f4cf-93b2-40ae-8c2a-ee2644033f87",
      "name": "Is Mistral?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        224,
        1328
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama-llama3:11434/api/generate",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"llama3\",\n  \"prompt\": \"={{ ($json.system && $json.system.trim() !== '') ? $json.system + '\\\\n\\\\n' + $json.prompt : $json.prompt }}\",\n  \"stream\": false,\n  \"options\": {\n    \"temperature\": 0.7,\n    \"num_predict\": 500\n  }\n}",
        "options": {}
      },
      "id": "fc6804d9-252d-4452-8813-8583d53d7161",
      "name": "Call Llama (Default)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        448,
        1424
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"{{ $json.ollama_model }}\",\n  \"prompt\": \"{{ ($json.system && $json.system.trim() !== '') ? $json.system + '\\\\n\\\\nUser: ' + $json.prompt : $json.prompt }}\",\n  \"stream\": false,\n  \"options\": {\n    \"temperature\": 0.7,\n    \"num_predict\": 500,\n    \"top_p\": 0.9,\n    \"stop\": [\"User:\", \"Assistant:\"]\n  }\n}",
        "options": {}
      },
      "id": "034181d3-f511-4f4b-9cfd-6d4ddeef6b71",
      "name": "Call Ollama",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        448,
        1232
      ]
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "ai.local",
            "x-real-ip": "10.10.10.64",
            "x-forwarded-for": "10.10.10.64",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "116",
            "authorization": "Basic YWRtaW46c3VwZXJzZWN1cmU=",
            "user-agent": "curl/8.7.1",
            "accept": "*/*",
            "content-type": "application/json"
          },
          "params": {},
          "query": {},
          "body": {
            "prompt": "Was ist DevOps?",
            "model": "ollama3",
            "system": "Du bist ein hilfsbereiter IT-Experte."
          },
          "webhookUrl": "http://localhost:5678/webhook/llm",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields": {
      "main": [
        [
          {
            "node": "Is mistralAPI?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Hugging Face": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenAI": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is OpenAI?": {
      "main": [
        [
          {
            "node": "Call OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Claude?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Claude?": {
      "main": [
        [
          {
            "node": "Call Claude",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is HuggingFace?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is HuggingFace?": {
      "main": [
        [
          {
            "node": "Call Hugging Face",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Mistral?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is mistralAPI?": {
      "main": [
        [
          {
            "node": "Call mistralAPI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is OpenAI?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call mistralAPI": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Mistral?": {
      "main": [
        [
          {
            "node": "Call Ollama",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call Llama (Default)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Llama (Default)": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Ollama": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a26465c0-e305-4091-9592-1eed9d111ceb",
  "meta": {
    "instanceId": "30444c4554305610e68ba60c6b73ce53f99b718ba25dfadc743e41cecea4e148"
  },
  "id": "FeCWSJLLfuV4gxW4",
  "tags": []
}