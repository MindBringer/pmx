{
  "name": "Audio Pipeline: Transcribe → (Diarize) → (Identify) → (Summarize)",
  "nodes": [
    {
      "parameters": {
        "path": "meetings/summarize",
        "httpMethod": "POST",
        "responseMode": "responseNode",
        "options": {
          "binaryData": true
        }
      },
      "id": "Webhook_Receive",
      "name": "Receive Audio",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 200]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            { "name": "diarize_flag", "value": "={{ $json.diarize_flag || $json.doDiar || $json.diarize || 'false' }}" },
            { "name": "identify", "value": "={{ $json.identify || $json.doIdentify || 'false' }}" },
            { "name": "summarize", "value": "={{ $json.summarize || 'false' }}" },
            { "name": "speaker_hints", "value": "={{ $json.speaker_hints || $json.hints || '' }}" },
            { "name": "tags", "value": "={{ $json.tags || '' }}" },
            { "name": "api_key", "value": "={{ $json.api_key || '' }}" },
            { "name": "language", "value": "={{ $json.language || '' }}" }
          ]
        }
      },
      "id": "Set_Prepare",
      "name": "Prepare Metadata",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [420, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://audio-api:8000/transcribe",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "x-api-key", "value": "={{ $json.api_key || '' }}" }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            { "parameterType": "formBinaryData", "name": "file", "inputDataFieldName": "file" },
            { "name": "vad_filter", "value": "true" },
            { "name": "chunk_length", "value": "120" },
            { "name": "language", "value": "={{ $json.language }}" }
          ]
        },
        "options": {
          "timeout": 300000
        }
      },
      "id": "HTTP_Transcribe",
      "name": "Transcribe (/transcribe)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [640, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.diarize_flag || 'false' }}",
              "operation": "equals",
              "value2": "true"
            }
          ]
        }
      },
      "id": "IF_Diarize",
      "name": "IF – Do Diarize?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [640, 40]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://audio-api:8000/diarize",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "x-api-key", "value": "={{ $json.api_key || '' }}" }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            { "parameterType": "formBinaryData", "name": "file", "inputDataFieldName": "file" }
          ]
        },
        "options": {
          "timeout": 300000
        }
      },
      "id": "HTTP_Diarize",
      "name": "Diarize (/diarize)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [860, 0]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "object": [
            { "name": "diarize", "value": "{\"segments\":[]}" }
          ]
        }
      },
      "id": "Set_DiarizeEmpty",
      "name": "Set Empty Diarize",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [860, 100]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition"
      },
      "id": "Merge_Diarize",
      "name": "Merge Diarize",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [1080, 40]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.identify || 'false' }}",
              "operation": "equals",
              "value2": "true"
            }
          ]
        }
      },
      "id": "IF_Identify",
      "name": "IF – Do Identify?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 320]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// erstellt segments_json + hints für Identify\n// Diarize aus Merge_Diarize (Additional Input)\nconst dia = $item(0, 'Merge Diarize')?.json || {};\nconst diaSegs = Array.isArray(dia.segments) ? dia.segments : [];\nconst d = diaSegs.map(s => ({\n  start_ms: Math.round(s.start_ms ?? s.from ?? 0),\n  end_ms:   Math.round(s.end_ms   ?? s.to   ?? 0)\n})).filter(s => s.end_ms > s.start_ms);\n// Whisper Segmente als Fallback\nconst w = Array.isArray($json.segments) ? $json.segments.map(s => ({ start_ms: Number(s.start_ms||0), end_ms: Number(s.end_ms||0) })) : [];\nconst segments = d.length ? d : w;\nreturn [{ json: {\n  segments_json: JSON.stringify({ segments }),\n  hints: $json.speaker_hints || '',\n  api_key: $json.api_key || ''\n}}];"
      },
      "id": "Code_BuildIdentifyPayload",
      "name": "Build Identify Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1080, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://audio-api:8000/identify",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "x-api-key", "value": "={{ $json.api_key || '' }}" }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            { "parameterType": "formBinaryData", "name": "file", "inputDataFieldName": "file" },
            { "name": "hints", "value": "={{ $json.hints }}" },
            { "name": "segments_json", "value": "={{ $json.segments_json }}" }
          ]
        },
        "options": {
          "timeout": 300000
        }
      },
      "id": "HTTP_Identify",
      "name": "Identify (/identify)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "object": [
            { "name": "identify", "value": "{\"overall\": null, \"segments\": [], \"topk_overall\": []}" }
          ]
        }
      },
      "id": "Set_IdentifyEmpty",
      "name": "Set Empty Identify",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1080, 420]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition"
      },
      "id": "Merge_Identify",
      "name": "Merge Identify",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [1520, 360]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.summarize || 'false' }}",
              "operation": "equals",
              "value2": "true"
            }
          ]
        }
      },
      "id": "IF_Summarize",
      "name": "IF – Summarize?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 540]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// sehr einfache Heuristik-Zusammenfassung (Platzhalter für LLM)\nconst segs = Array.isArray($json.segments) ? $json.segments : [];\nconst first = (segs[0]?.text || '').trim();\nconst second = (segs[1]?.text || '').trim();\nconst tldr = [];\nif (first) tldr.push(first.slice(0, 160));\nif (second) tldr.push(second.slice(0, 160));\nreturn [{ json: {\n  summary: {\n    tldr,\n    entscheidungen: [],\n    aktionen: [],\n    offene_fragen: [],\n    risiken: [],\n    zeitachse: segs.slice(0, Math.min(6, segs.length)).map(s => ({ from: new Date(s.start_ms).toISOString().substr(14,5), to: new Date(s.end_ms).toISOString().substr(14,5), topic: (s.text||'').slice(0,60) })),\n    redeanteile: []\n  }\n}}];"
      },
      "id": "Code_Summarize",
      "name": "Summarize (Heuristics)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1080, 520]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "object": [
            { "name": "summary", "value": "{\"tldr\":[],\"entscheidungen\":[],\"aktionen\":[],\"offene_fragen\":[],\"risiken\":[],\"zeitachse\":[],\"redeanteile\":[]}" }
          ]
        }
      },
      "id": "Set_SummarizeEmpty",
      "name": "Set Empty Summary",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1080, 620]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition"
      },
      "id": "Merge_Summary",
      "name": "Merge Summary",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [1300, 580]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Side-Inputs holen\nlet diarize = {};\ntry { diarize = $item(0, 'Merge Diarize')?.json || {}; } catch {}\nlet identify = {};\ntry { identify = $item(0, 'Merge Identify')?.json || {}; } catch {}\nlet summary = {};\ntry { summary = $item(0, 'Merge Summary')?.json?.summary || {}; } catch {}\n// Transcribe-Daten im aktuellen Item\nconst text = String($json.text || '').trim();\nconst segments = Array.isArray($json.segments) ? $json.segments.map(s=>({ start_ms:Number(s.start_ms||0), end_ms:Number(s.end_ms||0), text:String(s.text||'').trim() })) : [];\n// Tags CSV → Array\nconst tagsCsv = $json.tags || '';\nconst tags = tagsCsv.split(',').map(t=>t.trim()).filter(Boolean);\nreturn [{ json: {\n  meeting: { tags },\n  transcribe: { text, segments, info: $json.info || {} },\n  diarize: diarize.segments ? diarize : { segments: [] },\n  identify: identify.overall !== undefined ? identify : { overall: null, segments: [], topk_overall: [] },\n  summary: Object.keys(summary).length ? summary : { tldr:[], entscheidungen:[], aktionen:[], offene_fragen:[], risiken:[], zeitachse:[], redeanteile:[] }\n}}];"
      },
      "id": "Code_BuildOutput",
      "name": "Build Final Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1760, 280]
    },
    {
      "parameters": {
        "responseBody": "={{ $json }}",
        "responseCode": 200
      },
      "id": "Webhook_Respond",
      "name": "Respond",
      "type": "n8n-nodes-base.webhookRespond",
      "typeVersion": 1,
      "position": [1980, 280]
    }
  ],
  "connections": {
    "Receive Audio": {
      "main": [
        [
          { "node": "Prepare Metadata", "type": "main", "index": 0 }
        ]
      ]
    },
    "Prepare Metadata": {
      "main": [
        [
          { "node": "Transcribe (/transcribe)", "type": "main", "index": 0 }
        ],
        [
          { "node": "IF – Do Diarize?", "type": "main", "index": 0 }
        ]
      ]
    },
    "IF – Do Diarize?": {
      "main": [
        [
          { "node": "Diarize (/diarize)", "type": "main", "index": 0 }
        ],
        [
          { "node": "Set Empty Diarize", "type": "main", "index": 0 }
        ]
      ]
    },
    "Diarize (/diarize)": {
      "main": [
        [
          { "node": "Merge Diarize", "type": "main", "index": 0 }
        ]
      ]
    },
    "Set Empty Diarize": {
      "main": [
        [
          { "node": "Merge Diarize", "type": "main", "index": 1 }
        ]
      ]
    },
    "Transcribe (/transcribe)": {
      "main": [
        [
          { "node": "IF – Do Identify?", "type": "main", "index": 0 }
        ],
        [
          { "node": "IF – Summarize?", "type": "main", "index": 0 }
        ],
        [
          { "node": "Build Final Output", "type": "main", "index": 0 }
        ]
      ]
    },
    "IF – Do Identify?": {
      "main": [
        [
          { "node": "Build Identify Payload", "type": "main", "index": 0 }
        ],
        [
          { "node": "Set Empty Identify", "type": "main", "index": 0 }
        ]
      ]
    },
    "Build Identify Payload": {
      "main": [
        [
          { "node": "Identify (/identify)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Identify (/identify)": {
      "main": [
        [
          { "node": "Merge Identify", "type": "main", "index": 0 }
        ]
      ]
    },
    "Set Empty Identify": {
      "main": [
        [
          { "node": "Merge Identify", "type": "main", "index": 1 }
        ]
      ]
    },
    "IF – Summarize?": {
      "main": [
        [
          { "node": "Summarize (Heuristics)", "type": "main", "index": 0 }
        ],
        [
          { "node": "Set Empty Summary", "type": "main", "index": 0 }
        ]
      ]
    },
    "Summarize (Heuristics)": {
      "main": [
        [
          { "node": "Merge Summary", "type": "main", "index": 0 }
        ]
      ]
    },
    "Set Empty Summary": {
      "main": [
        [
          { "node": "Merge Summary", "type": "main", "index": 1 }
        ]
      ]
    },
    "Merge Summary": {
      "main": [
        [
          { "node": "Build Final Output", "type": "main", "index": 0 }
        ]
      ]
    },
    "Merge Diarize": {
      "main": [
        [
          { "node": "Build Identify Payload", "type": "main", "index": 0 }
        ],
        [
          { "node": "Build Final Output", "type": "main", "index": 0 }
        ]
      ]
    },
    "Merge Identify": {
      "main": [
        [
          { "node": "Build Final Output", "type": "main", "index": 0 }
        ]
      ]
    },
    "Build Final Output": {
      "main": [
        [
          { "node": "Respond", "type": "main", "index": 0 }
        ]
      ]
    }
  }
}
