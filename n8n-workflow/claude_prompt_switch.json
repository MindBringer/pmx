{
  "name": "LLM Router with IF Chain",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "llm",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-node",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [100, 400],
      "webhookId": "llm-router"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "prompt-assignment",
              "name": "prompt",
              "value": "={{ $json.body.prompt || $json.prompt }}",
              "type": "string"
            },
            {
              "id": "model-assignment",
              "name": "model",
              "value": "={{ $json.body.model || $json.model }}",
              "type": "string"
            },
            {
              "id": "hf-model-assignment",
              "name": "hf_model",
              "value": "={{ $json.body.hf_model || $json.hf_model || 'microsoft/DialoGPT-medium' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "edit-fields-node",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [300, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "openai-condition",
              "leftValue": "={{ $json.model }}",
              "rightValue": "openai",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-openai",
      "name": "Is OpenAI?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [500, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "claude-condition",
              "leftValue": "={{ $json.model }}",
              "rightValue": "anthropic",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-claude",
      "name": "Is Claude?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [500, 550]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "hf-condition",
              "leftValue": "={{ $json.model }}",
              "rightValue": "huggingface",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-hf",
      "name": "Is HuggingFace?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [500, 700]
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "seconds"
      },
      "id": "wait-openai-node",
      "name": "Wait OpenAI",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.prompt }}\"\n    }\n  ]\n}",
        "options": {
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetween": 2000
          }
        }
      },
      "id": "openai-node",
      "name": "Call OpenAI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "seconds"
      },
      "id": "wait-claude-node",
      "name": "Wait Claude",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [700, 450]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "anthropicApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"max_tokens\": 1000,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.prompt }}\"\n    }\n  ]\n}",
        "options": {
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetween": 2000
          }
        }
      },
      "id": "claude-node",
      "name": "Call Claude",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 450],
      "credentials": {
        "anthropicApi": {
          "id": "claude-credentials",
          "name": "Claude API"
        }
      }
    },
    {
      "parameters": {
        "amount": 0.5,
        "unit": "seconds"
      },
      "id": "wait-hf-node",
      "name": "Wait HF",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [700, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/{{ $json.hf_model }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "huggingFaceApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"inputs\": \"{{ $json.prompt }}\",\n  \"parameters\": {\n    \"max_length\": 500,\n    \"temperature\": 0.7,\n    \"do_sample\": true\n  }\n}",
        "options": {
          "retry": {
            "enabled": true,
            "maxTries": 2,
            "waitBetween": 3000
          }
        }
      },
      "id": "huggingface-node",
      "name": "Call Hugging Face",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 600],
      "credentials": {
        "huggingFaceApi": {
          "id": "hf-credentials",
          "name": "Hugging Face API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"model\": \"mistral\",\n  \"prompt\": \"{{ $json.prompt }}\",\n  \"stream\": false\n}",
        "options": {
          "retry": {
            "enabled": true,
            "maxTries": 2,
            "waitBetween": 1000
          }
        }
      },
      "id": "ollama-node",
      "name": "Call Ollama (Default)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [700, 750]
    },
    {
      "parameters": {
        "jsCode": "// Extrahiere die Antwort je nach API\nconst data = $input.first().json;\nconst modelUsed = $('Edit Fields').first().json.model;\n\nlet result;\nlet provider;\n\n// OpenAI Format\nif (data && data.choices && data.choices[0] && data.choices[0].message) {\n  result = data.choices[0].message.content;\n  provider = 'OpenAI';\n} \n// Claude/Anthropic Format\nelse if (data && data.content && Array.isArray(data.content) && data.content[0]) {\n  result = data.content[0].text || data.content[0].content;\n  provider = 'Claude/Anthropic';\n}\n// Hugging Face Format (Array response)\nelse if (Array.isArray(data) && data[0] && data[0].generated_text) {\n  result = data[0].generated_text;\n  provider = 'Hugging Face';\n}\n// Hugging Face Format (Single object)\nelse if (data && data.generated_text) {\n  result = data.generated_text;\n  provider = 'Hugging Face';\n}\n// Ollama Format\nelse if (data && data.response) {\n  result = data.response;\n  provider = 'Ollama';\n}\n// Ollama alternative Formate\nelse if (data && data.message) {\n  result = data.message;\n  provider = 'Ollama';\n}\n// Fallback\nelse {\n  result = JSON.stringify(data);\n  provider = 'Unknown';\n}\n\n// Bereinige die Antwort (entferne Input-Prompt bei HF wenn vorhanden)\nif (provider === 'Hugging Face' && result) {\n  const originalPrompt = $('Edit Fields').first().json.prompt;\n  if (result.startsWith(originalPrompt)) {\n    result = result.substring(originalPrompt.length).trim();\n  }\n}\n\nreturn {\n  result: result,\n  status: 'success',\n  provider: provider,\n  model_requested: modelUsed,\n  timestamp: new Date().toISOString(),\n  raw_response: data\n};"
      },
      "id": "format-node",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 450]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond-node",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1300, 450]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Is OpenAI?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is OpenAI?": {
      "main": [
        [
          {
            "node": "Wait OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is Claude?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Claude?": {
      "main": [
        [
          {
            "node": "Wait Claude",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is HuggingFace?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is HuggingFace?": {
      "main": [
        [
          {
            "node": "Wait HF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call Ollama (Default)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait OpenAI": {
      "main": [
        [
          {
            "node": "Call OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Claude": {
      "main": [
        [
          {
            "node": "Call Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait HF": {
      "main": [
        [
          {
            "node": "Call Hugging Face",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenAI": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Hugging Face": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Ollama (Default)": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3.0",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "llm-router-if-chain",
  "tags": []
}