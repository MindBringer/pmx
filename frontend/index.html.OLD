<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>üß† AI Prompt Interface</title>
  <style>
    *{margin:0;padding:0;box-sizing:border-box}
    body{
      font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,sans-serif;
      background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);
      min-height:100vh;padding:20px;display:flex;align-items:center;justify-content:center
    }
    .container{
      background:rgba(255,255,255,.95);border-radius:20px;box-shadow:0 20px 40px rgba(0,0,0,.1);
      padding:24px;max-width:860px;width:100%;backdrop-filter:blur(10px)
    }
    h2{color:#333;margin-bottom:18px;text-align:center;font-size:28px;font-weight:300}

    /* Tabs */
    .tabs{display:flex;width:100%;margin-bottom:16px}
    .tab{
      flex:1;
      padding:10px 14px;
      border-radius:10px 10px 0 0;
      border:2px solid #e0e0e0;
      background:#fff;
      cursor:pointer;
      font-weight:500;color:#444;transition:.2s;text-align:center
    }
    .tab.active{border-color:#667eea;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:#fff}

    /* Panels (wichtig: unsichtbar wenn inaktiv) */
    .panel{display:none;position:relative}
    .panel.active{display:block}

    .form-group{margin-bottom:16px}
    label{display:block;margin-bottom:8px;color:#555;font-weight:500;font-size:14px}
    select,textarea,input[type="text"],input[type="file"],input[type="password"]{
      width:100%;padding:12px 16px;border:2px solid #e0e0e0;border-radius:10px;font-size:16px;transition:.2s;font-family:inherit
    }
    select:focus,textarea:focus,input[type="text"]:focus,input[type="password"]:focus{
      outline:none;border-color:#667eea;box-shadow:0 0 0 3px rgba(102,126,234,.1)
    }
    textarea{min-height:120px;resize:vertical}
    .row{display:flex;gap:12px;align-items:center;flex-wrap:wrap}
    .row .col{flex:1 1 240px}

    button{
      width:100%;padding:14px 24px;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);
      color:#fff;border:none;border-radius:10px;font-size:16px;font-weight:500;cursor:pointer;transition:.2s;margin:8px 0 18px
    }
    button:hover:not(:disabled){transform:translateY(-2px);box-shadow:0 5px 15px rgba(102,126,234,.4)}
    button:disabled{opacity:.7;cursor:not-allowed;transform:none}

    #result,#upload-result{
      background:#f8f9fa;border-radius:10px;padding:16px;min-height:90px;white-space:pre-wrap;color:#333;line-height:1.6;border:2px solid #e0e0e0;position:relative
    }
    .loading-container{
      display:none;flex-direction:column;align-items:center;justify-content:center;
      padding:32px;position:absolute;inset:0;background:rgba(248,249,250,.95);border-radius:10px;z-index:10
    }
    .loading-container.active{display:flex}
    .spinner{width:40px;height:40px;position:relative}
    .spinner::before{content:'';position:absolute;inset:0;border:4px solid #e0e0e0;border-radius:50%;border-top-color:#667eea;animation:spin 1s linear infinite}
    @keyframes spin{to{transform:rotate(360deg)}}
    .loading-text{margin-top:12px;color:#667eea;font-size:16px;font-weight:500}
    .dots{display:inline-block;width:20px;text-align:left}
    .dots::after{content:'';animation:dots 1.5s steps(4,end) infinite}
    @keyframes dots{0%{content:''}25%{content:'.'}50%{content:'..'}75%{content:'...'}100%{content:''}}
    .error{color:#dc3545;background:#f8d7da;border-color:#f5c6cb}
    .success{background:#d1ecf1;border-color:#bee5eb}
    .inline-help{font-size:12px;color:#666;margin-top:6px}
    .choices{display:flex;gap:12px}
    .choice{padding:8px 12px;border:2px solid #e0e0e0;border-radius:999px;cursor:pointer;user-select:none}
    .choice input{display:none}
    .choice.active{border-color:#667eea;background:#eef1ff}

    /* kleine Helfer */
    .muted{color:#666}
    .mono{font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;}
    ul.sources{margin-top:10px;padding-left:18px}
    ul.sources li{margin:4px 0}
  </style>
</head>
<body>
  <div class="container">
    <h2>üß† AI Prompt Interface</h2>

    <!-- Tabs -->
    <div class="tabs">
      <button class="tab active" data-target="tab-prompt">Prompt</button>
      <button class="tab" data-target="tab-docs">Dateien</button>
    </div>

    <!-- Panel: Prompt -->
    <div class="panel active" id="tab-prompt">
      <form id="prompt-form">
        <div class="form-group">
          <label for="model">Modell:</label>
          <select id="model">
            <option value="llama3">llama3</option>
            <option value="mistral">mistral</option>
            <option value="mistralapi">Codestral API</option>
            <option value="groq">Groq API</option>
            <option value="openrouter">OpenRouter API</option>
            <option value="openai">OpenAI API</option>
            <option value="huggingface">Hugging Face API</option>
            <option value="anthropic">Anthropic API</option>
          </select>
        </div>

        <div class="form-group">
          <label for="prompt">Frage / Prompt:</label>
          <textarea id="prompt" placeholder="Stell eine Frage an das Modell..."></textarea>
        </div>

        <div class="form-group">
          <label for="system">Anweisungen f√ºr Systemverhalten (optional):</label>
          <textarea id="system" placeholder="sei ein hilfsbereiter Spezialist f√ºr..."></textarea>
        </div>

        <div class="form-group">
          <label>Firmendaten mit einbeziehen?</label>
          <div class="choices" id="rag-choices">
            <label class="choice active"><input type="radio" name="rag" value="false" checked> Nein</label>
            <label class="choice"><input type="radio" name="rag" value="true"> Ja</label>
          </div>
          <div class="inline-help">Wenn ‚ÄûJa‚Äú, wird <code>rag=true</code> an <code>/webhook/llm</code> √ºbergeben.</div>
        </div>

        <button type="submit" id="submit-btn">Senden</button>
      </form>

      <div id="result">
        <div id="result-output"></div>
        <div class="loading-container" id="spinner">
          <div class="spinner"></div>
          <div class="loading-text">Ich arbeite<span class="dots"></span></div>
        </div>
      </div>
    </div>

    <!-- Panel: Dokumente -->
    <div class="panel" id="tab-docs">
      <form id="docs-form">
        <div class="form-group">
          <label for="apiKey">API-Key (RAG)</label>
          <div class="row" style="gap:8px;align-items:center">
            <input type="password" id="apiKey" placeholder="x-api-key f√ºr RAG-Backend (z. B. change-me)" class="col" />
            <button type="button" id="toggleKey" style="flex:0 0 auto;width:auto;padding:10px 14px">anzeigen</button>
          </div>
          <div class="inline-help">Wird als Header <code>x-api-key</code> an <code>/rag/index</code> gesendet.</div>
        </div>

        <div class="row">
          <div class="form-group col">
            <label for="file">Datei ausw√§hlen</label>
            <input type="file" id="file" />
            <div class="inline-help">Unterst√ºtzt: txt, md, pdf, html, docx, odt, xlsx, eml</div>
          </div>
          <div class="form-group col">
            <label for="tags">Tags</label>
            <input type="text" id="tags" placeholder="z. B. projektX,angebot,intern" />
            <div class="inline-help">(optional, Komma-getrennt)</div>
          </div>
        </div>

        <button type="submit" id="upload-btn">Hochladen</button>
      </form>

      <div id="upload-result">
        <div id="upload-output"></div>
        <div class="loading-container" id="upload-spinner">
          <div class="spinner"></div>
          <div class="loading-text">Lade hoch<span class="dots"></span></div>
        </div>
      </div>

      <!-- --- Audio Upload (Transkription) --- -->
      <div style="height:1px;background:#eee;margin:18px 0"></div>
      <form id="audio-form">
        <div class="form-group">
          <label for="audioFile">Audio ausw√§hlen</label>
          <input type="file" id="audioFile" accept="audio/*" />
          <div class="inline-help">Unterst√ºtzt: wav, mp3, m4a, ogg, webm, flac</div>
        </div>

        <div class="row">
          <div class="form-group col">
            <label for="audioTags">Tags</label>
            <input type="text" id="audioTags" placeholder="z. B. meeting,vertrieb,2025-08-14" />
            <div class="inline-help">(optional, Komma-getrennt; wird an die Transkription geh√§ngt)</div>
          </div>
        </div>

        <button type="submit" id="audio-upload-btn">Audio hochladen & transkribieren</button>
      </form>

      <div id="audio-upload-result">
        <div id="audio-upload-output"></div>
        <div class="loading-container" id="audio-upload-spinner">
          <div class="spinner"></div>
          <div class="loading-text">Transkribiere<span class="dots"></span></div>
        </div>
      </div>

    </div>
  </div>
    </div>
  </div>

  <script>
    // Tabs
    document.querySelectorAll('.tab').forEach(btn=>{
      btn.addEventListener('click',()=>{
        document.querySelectorAll('.tab').forEach(b=>b.classList.remove('active'));
        document.querySelectorAll('.panel').forEach(p=>p.classList.remove('active'));
        btn.classList.add('active');
        document.getElementById(btn.dataset.target).classList.add('active');
      });
    });

    // API-Key persist + toggle
    const apiKeyInput = document.getElementById('apiKey');
    const toggleKeyBtn = document.getElementById('toggleKey');
    const savedKey = localStorage.getItem('ragApiKey');
    if (savedKey) apiKeyInput.value = savedKey;
    apiKeyInput.addEventListener('input', () => {
      localStorage.setItem('ragApiKey', apiKeyInput.value.trim());
    });
    toggleKeyBtn.addEventListener('click', () => {
      const hidden = apiKeyInput.type === 'password';
      apiKeyInput.type = hidden ? 'text' : 'password';
      toggleKeyBtn.textContent = hidden ? 'verbergen' : 'anzeigen';
    });

    // Radio pill styling
    const ragChoices = document.getElementById('rag-choices');
    ragChoices.addEventListener('change', () => {
      ragChoices.querySelectorAll('.choice').forEach(c => c.classList.remove('active'));
      const sel = ragChoices.querySelector('input[name="rag"]:checked');
      sel.closest('.choice').classList.add('active');
    });

    // Helper: Spinner mindestens X ms anzeigen
    function showFor(el, ms=300) {
      el.classList.add("active");
      const start = performance.now();
      return () => {
        const elapsed = performance.now() - start;
        const left = Math.max(0, ms - elapsed);
        setTimeout(() => el.classList.remove("active"), left);
      };
    }

    // ---------- Prompt ----------
    window.addEventListener("DOMContentLoaded", function () {
      const form = document.getElementById("prompt-form");
      const resultDiv = document.getElementById("result");
      const resultOut = document.getElementById("result-output");
      const spinner = document.getElementById("spinner");
      const submitBtn = document.getElementById("submit-btn");

      form.addEventListener("submit", async function (e) {
        e.preventDefault();
        const prompt = document.getElementById("prompt").value.trim();
        const model = document.getElementById("model").value;
        const system = document.getElementById("system").value.trim();
        const ragVal = document.querySelector('input[name="rag"]:checked')?.value === "true";

        if (!prompt) {
          resultOut.textContent = "‚ö†Ô∏è Bitte gib einen Prompt ein.";
          resultDiv.className = "error";
          return;
        }

        resultOut.innerHTML = "";
        resultDiv.className = "";
        const hideSpinner = showFor(spinner, 300);
        submitBtn.disabled = true;

        try {
          const response = await fetch("/webhook/llm", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ prompt, system, model, rag: ragVal })
          });
          const text = await response.text();
          if (!response.ok) throw new Error(text || `Fehler ${response.status}`);

          let data; try { data = JSON.parse(text); } catch { data = { raw: text }; }

          // Antworttext holen
          const answer =
            data?.answer ??
            data?.raw_response?.response ??
            data?.result ??
            (typeof data === "string" ? data : JSON.stringify(data, null, 2));

          // Quellen robust extrahieren (verschiedene m√∂gliche Felder)
          const sources =
            data?.sources ??
            data?.raw_response?.sources ??
            data?.metadata?.sources ??
            [];

          const usedTags = data?.used_tags || data?.raw_response?.used_tags || [];

          // Ausgabe bauen
          let html = "";
          html += `<div>${escapeHtml(answer || "")}</div>`;

          if (Array.isArray(sources) && sources.length > 0) {
            html += `<div class="muted" style="margin-top:10px">Quellen:</div><ul class="sources">`;
            sources.forEach((s) => {
              const meta = s.meta || {};
              const fn = meta.filename || meta.file_path || s.filename || "Quelle";
              const score = typeof s.score === "number" ? ` (score: ${s.score.toFixed(3)})` : "";
              const snippet = s.snippet ? ` ‚Äì <span class="muted">‚Äû${escapeHtml(String(s.snippet)).slice(0,180)}‚Äú</span>` : "";
              html += `<li><span class="mono">${escapeHtml(fn)}</span>${score}${snippet}</li>`;
            });
            html += `</ul>`;
          }

          if (Array.isArray(usedTags) && usedTags.length > 0) {
            html += `<div class="muted" style="margin-top:6px">Tags: ${usedTags.map(t=>`<code>${escapeHtml(t)}</code>`).join(", ")}</div>`;
          }

          resultOut.innerHTML = html;
          resultDiv.className = "success";
        } catch (error) {
          resultOut.textContent = `‚ùå Fehler: ${error.message}`;
          resultDiv.className = "error";
        } finally {
          hideSpinner();
          submitBtn.disabled = false;
        }
      });

      // ---------- Upload ----------
      const docsForm = document.getElementById("docs-form");
      const uploadRes = document.getElementById("upload-result");
      const uploadOut = document.getElementById("upload-output");
      const uploadSpinner = document.getElementById("upload-spinner");
      const uploadBtn = document.getElementById("upload-btn");

      docsForm.addEventListener("submit", async function (e) {
        e.preventDefault();
        const apiKey = document.getElementById("apiKey").value.trim();
        const fileEl = document.getElementById("file");
        const tagsStr = document.getElementById("tags").value.trim();

        if (!apiKey) {
          uploadOut.textContent = "‚ö†Ô∏è Bitte API-Key eintragen.";
          uploadRes.className = "error";
          return;
        }
        if (!fileEl.files || fileEl.files.length === 0) {
          uploadOut.textContent = "‚ö†Ô∏è Bitte eine Datei ausw√§hlen.";
          uploadRes.className = "error";
          return;
        }

        uploadOut.innerHTML = "";
        uploadRes.className = "";
        const hideSpinner = showFor(uploadSpinner, 300);
        uploadBtn.disabled = true;

        try {
          const fd = new FormData();
          fd.append("files", fileEl.files[0]); // Backend erwartet "files"
          if (tagsStr) {
            tagsStr.split(",").map(t=>t.trim()).filter(Boolean).forEach(t => fd.append("tags", t));
          }

          const resp = await fetch("/rag/index", {
            method: "POST",
            headers: { "x-api-key": apiKey }, // kein Content-Type setzen!
            body: fd
          });

          const txt = await resp.text();
          if (!resp.ok) throw new Error(txt || `Fehler ${resp.status}`);

          let data; try { data = JSON.parse(txt); } catch { data = { raw: txt }; }

          // Erwartete Struktur: { indexed: N, files: [{filename, chunks}, ...] }
          const indexed = data?.indexed;
          const files = Array.isArray(data?.files) ? data.files : [];

          let html = "";
          html += `<div>‚úÖ Fertig${typeof indexed === "number" ? `. Chunks: <strong>${indexed}</strong>` : ""}</div>`;

          if (files.length > 0) {
            html += `<div class="muted" style="margin-top:8px">Details:</div><ul class="sources">`;
            files.forEach(f => {
              const fn = f.filename || f.file || "Datei";
              const ch = (typeof f.chunks === "number") ? ` ‚Äì Chunks: ${f.chunks}` : "";
              html += `<li><span class="mono">${escapeHtml(fn)}</span>${ch}</li>`;
            });
            html += `</ul>`;
          }

          // Wenn das Backend doch rohe Daten zur√ºckgibt:
          if (!indexed && files.length === 0 && data?.raw) {
            html += `<pre class="mono" style="margin-top:8px">${escapeHtml(String(data.raw))}</pre>`;
          }

          uploadOut.innerHTML = html;
          uploadRes.className = "success";
        } catch (err) {
          uploadOut.textContent = `‚ùå Upload fehlgeschlagen: ${err.message}`;
          uploadRes.className = "error";
        } finally {
          hideSpinner();
          uploadBtn.disabled = false;
        }
      });
    });

    // HTML-Escaping f√ºr sichere Ausgaben
    function escapeHtml(str){
      return String(str)
        .replace(/&/g,"&amp;")
        .replace(/</g,"&lt;")
        .replace(/>/g,"&gt;")
        .replace(/"/g,"&quot;")
        .replace(/'/g,"&#039;");
    }
      // ---------- Audio Upload (Transkription) ----------
      const audioForm    = document.getElementById("audio-form");
      const audioRes     = document.getElementById("audio-upload-result");
      const audioOut     = document.getElementById("audio-upload-output");
      const audioSpinner = document.getElementById("audio-upload-spinner");
      const audioBtn     = document.getElementById("audio-upload-btn");

      if (audioForm) {
        audioForm.addEventListener("submit", async function (e) {
          e.preventDefault();
          const apiKey = document.getElementById("apiKey").value.trim();
          const fileEl = document.getElementById("audioFile");
          const tagsStr = document.getElementById("audioTags").value.trim();

          if (!apiKey) {
            audioOut.textContent = "‚ö†Ô∏è Bitte API-Key eintragen.";
            audioRes.className = "error";
            return;
          }
          if (!fileEl.files || fileEl.files.length === 0) {
            audioOut.textContent = "‚ö†Ô∏è Bitte eine Audio-Datei ausw√§hlen.";
            audioRes.className = "error";
            return;
          }

          audioOut.innerHTML = "";
          audioRes.className = "";
          const hideSpinner = showFor(audioSpinner, 400);
          audioBtn.disabled = true;

          try {
            const fd = new FormData();
            fd.append("file", fileEl.files[0]); // Transcribe erwartet typischerweise "file"
            if (tagsStr) {
              tagsStr.split(",").map(t=>t.trim()).filter(Boolean).forEach(t => fd.append("tags", t));
            }

            const resp = await fetch("/rag/transcribe", {
              method: "POST",
              headers: { "x-api-key": apiKey },
              body: fd
            });

            const txt = await resp.text();
            if (!resp.ok) throw new Error(txt || `Fehler ${resp.status}`);

            let data; try { data = JSON.parse(txt); } catch { data = { raw: txt }; }

            // Versuche m√∂gliche Felder
            const transcript =
              data?.text ||
              data?.transcript ||
              data?.transcription ||
              data?.result ||
              (typeof data === "string" ? data : "");

            const usedTags = data?.used_tags || data?.tags || [];

            // Optional: Zusatzinfos
            const lang = data?.language || data?.lang;
            const dur  = data?.duration || data?.audio_duration;
            const model = data?.model || data?.whisper_model;

            let html = "";
            if (transcript) {
              html += `<div>‚úÖ Fertig ‚Äì Transkript:</div>`;
              html += `<pre class="mono" style="margin-top:6px;max-height:260px;overflow:auto">${escapeHtml(String(transcript))}</pre>`;
            } else {
              html += `<div>‚úÖ Fertig ‚Äì Antwort erhalten.</div>`;
              if (data?.raw) html += `<pre class="mono" style="margin-top:6px">${escapeHtml(String(data.raw))}</pre>`;
            }

            const metaBits = [];
            if (lang)  metaBits.append = undefined
            if (lang)  metaBits.push(`Sprache: ${escapeHtml(String(lang))}`);
            if (dur)   metaBits.push(`Dauer: ${escapeHtml(String(dur))}`);
            if (model) metaBits.push(`Modell: ${escapeHtml(String(model))}`);
            if (metaBits.length) {
              html += `<div class="muted" style="margin-top:6px">${metaBits.join(" ¬∑ ")}</div>`;
            }

            if (Array.isArray(usedTags) && usedTags.length) {
              html += `<div class="muted" style="margin-top:6px">Tags: ${usedTags.map(t=>`<code>${escapeHtml(t)}</code>`).join(", ")}</div>`;
            }

            audioOut.innerHTML = html;
            audioRes.className = "success";
          } catch (err) {
            audioOut.textContent = `‚ùå Transkription fehlgeschlagen: ${err.message}`;
            audioRes.className = "error";
          } finally {
            hideSpinner();
            audioBtn.disabled = false;
          }
        });
      }

  </script>
</body>
</html>
