# GPU-fertiges Base-Image mit cuDNN9
FROM pytorch/pytorch:2.4.0-cuda12.1-cudnn9-runtime

RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg git build-essential python3-dev \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PIP_NO_CACHE_DIR=1

# WICHTIG: In requirements.audio.txt KEINE torch/torchaudio/torchvision!
COPY rag-backend/requirements.audio.txt /app/requirements.txt
RUN python -m pip install -U pip && \
    pip install --prefer-binary --no-deps -r /app/requirements.txt

# cuDNN 9.1 f√ºr CUDA12 sicher ins Image holen
RUN pip install --no-cache-dir nvidia-cudnn-cu12==9.1.0.70

# LD_LIBRARY_PATH + ldconfig (damit der dynamische Linker die libs findet)
ENV LD_LIBRARY_PATH=/opt/conda/lib/python3.11/site-packages/nvidia/cudnn/lib:${LD_LIBRARY_PATH}
RUN python - <<'PY'
import site, os
paths=[os.path.join(sp,"nvidia","cudnn","lib") for sp in site.getsitepackages() if os.path.isdir(os.path.join(sp,"nvidia","cudnn","lib"))]
open("/etc/ld.so.conf.d/zz-nvidia-cudnn.conf","w").write("\n".join(paths)+"\n")
print("cuDNN lib paths:", paths)
PY
RUN ldconfig

COPY rag-backend/app /app/app
RUN [ -f /app/app/__init__.py ] || touch /app/app/__init__.py

# <<< HIER: statt printf jetzt sauberer Heredoc >>>
RUN cat > /app/audio_main.py <<'PY'
from fastapi import FastAPI
try:
    from app.transcribe import router as transcribe_router
except ModuleNotFoundError:
    from app.routers.transcribe import router as transcribe_router

app = FastAPI(title="audio-api")
app.include_router(transcribe_router, prefix="")

@app.get("/health")
def health():
    return {"status": "ok"}
PY
# <<< Ende Heredoc >>>

EXPOSE 6080
ENTRYPOINT ["uvicorn","audio_main:app","--host","0.0.0.0","--port","6080"]
