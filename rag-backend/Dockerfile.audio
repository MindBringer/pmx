# GPU-fertiges Base-Image mit cuDNN9
FROM pytorch/pytorch:2.4.0-cuda12.1-cudnn9-runtime

RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg git build-essential python3-dev libsndfile1\
 && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PIP_NO_CACHE_DIR=1

# WICHTIG: In requirements.audio.txt KEINE torch/torchaudio/torchvision!
COPY rag-backend/requirements.audio.txt /app/requirements.txt

# Torch/torchaudio-Zeilen entfernen, den Rest ganz normal mit Abhängigkeiten installieren
RUN python -m pip install -U pip && \
    grep -Ev '^(torch|torchaudio)($|[=<>~])' /app/requirements.txt > /app/requirements_notorch.txt && \
    pip install --prefer-binary -r /app/requirements_notorch.txt

# cuDNN absichern (falls noch nicht drin) + Pfade registrieren
RUN pip install --no-cache-dir nvidia-cudnn-cu12==9.1.0.70
ENV LD_LIBRARY_PATH=/opt/conda/lib/python3.11/site-packages/nvidia/cudnn/lib:${LD_LIBRARY_PATH}
RUN python - <<'PY'
import site, os
paths=[os.path.join(sp,"nvidia","cudnn","lib") for sp in site.getsitepackages() if os.path.isdir(os.path.join(sp,"nvidia","cudnn","lib"))]
open("/etc/ld.so.conf.d/zz-nvidia-cudnn.conf","w").write("\n".join(paths)+"\n")
print("cuDNN lib paths:", paths)
PY
RUN ldconfig

COPY rag-backend/app /app/app
RUN [ -f /app/apps/__init__.py ] || touch /app/apps/__init__.py && \
    [ -f /app/apps/routers/__init__.py ] || touch /app/apps/routers/__init__.py

# <<< Heredoc >>>
RUN cat > /app/audio_main.py <<'PY'
from fastapi import FastAPI

# Flexible Importe: erlaubt sowohl app.<file> als auch app.routers.<file>
try:
    from app.transcribe import router as transcribe_router
except ModuleNotFoundError:
    from app.routers.transcribe import router as transcribe_router

try:
    from app.diarize import router as diarize_router
except ModuleNotFoundError:
    from app.routers.diarize import router as diarize_router

try:
    from app.identify import router as identify_router
except ModuleNotFoundError:
    from app.routers.identify import router as identify_router

app = FastAPI(title="audio-api")

# Router registrieren (kein zusätzliches prefix, falls im APIRouter schon gesetzt)
app.include_router(transcribe_router)
app.include_router(diarize_router)
app.include_router(identify_router)

@app.get("/health")
def health():
    return {"status": "ok"}
PY
# <<< Ende Heredoc >>>

EXPOSE 6080
ENTRYPOINT ["uvicorn","audio_main:app","--host","0.0.0.0","--port","6080"]
